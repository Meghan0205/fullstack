// mongoose.js
const mongoose = require('mongoose');

// ...

const personSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    minlength: 3,
  },
  number: {
    type: String,
    required: true,
    validate: {
      validator: function (value) {
        // Use a regular expression to validate phone number format
        return /^[0-9]{2,3}-[0-9]+$/.test(value);
      },
      message: 'Phone number must have the format XX-XXXXXXXX (e.g., 09-12345678)',
    },
  },
});

// ...


app.post('/api/persons', (req, res, next) => {
  const { name, number } = req.body;

  const person = new Person({
    name: name,
    number: number,
  });

  person
    .save()
    .then((savedPerson) => {
      res.json(savedPerson);
    })
    .catch((error) => {
      if (error.name === 'ValidationError') {
        // Validation error, respond with a 400 status and error message
        return res.status(400).json({ error: error.message });
      }
      // Other errors, pass to the error handling middleware
      next(error);
    });
});
