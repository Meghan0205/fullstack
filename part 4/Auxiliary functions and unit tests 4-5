const favoriteBlog = (blogs) => {
  if (blogs.length === 0) {
    return null; // Return null if the list of blogs is empty.
  }

  const mostLikedBlog = blogs.reduce((prevBlog, currentBlog) => {
    return prevBlog.likes > currentBlog.likes ? prevBlog : currentBlog;
  });

  // Extract and return the title, author, and likes of the most liked blog.
  const { title, author, likes } = mostLikedBlog;
  return { title, author, likes };
}

module.exports = {
  dummy,
  totalLikes,
  favoriteBlog
}


describe('favorite blog', () => {
  test('when list has only one blog, it is the favorite', () => {
    const listWithOneBlog = [
      {
        title: 'Go To Statement Considered Harmful',
        author: 'Edsger W. Dijkstra',
        likes: 5
      }
    ];

    const result = listHelper.favoriteBlog(listWithOneBlog);
    const expected = {
      title: 'Go To Statement Considered Harmful',
      author: 'Edsger W. Dijkstra',
      likes: 5
    };
    expect(result).toEqual(expected);
  });

  test('when list has multiple blogs, it returns the favorite blog', () => {
    const listWithMultipleBlogs = [
      {
        title: 'First Blog',
        author: 'Author A',
        likes: 8
      },
      {
        title: 'Second Blog',
        author: 'Author B',
        likes: 12
      },
      {
        title: 'Third Blog',
        author: 'Author C',
        likes: 7
      }
    ];

    const result = listHelper.favoriteBlog(listWithMultipleBlogs);
    const expected = {
      title: 'Second Blog',
      author: 'Author B',
      likes: 12
    };
    expect(result).toEqual(expected);
  });

  test('when list is empty, it returns null', () => {
    const emptyList = [];

    const result = listHelper.favoriteBlog(emptyList);
    expect(result).toBeNull();
  });

  // Add more test cases here to cover various scenarios
});
