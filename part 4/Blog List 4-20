4.20*: bloglist expansion, step8
This example from part 4 shows taking the token from the header with the getTokenFrom helper function.

If you used the same solution, refactor taking the token to a middleware. The middleware should take the token from the Authorization header and place it into the token field of the request object.

In other words, if you register this middleware in the app.js file before all routes

app.use(middleware.tokenExtractor)copy
Routes can access the token with request.token:

blogsRouter.post('/', async (request, response) => {
  // ..
  const decodedToken = jwt.verify(request.token, process.env.SECRET)
  // ..
})copy
Remember that a normal middleware function is a function with three parameters, that at the end calls the last parameter next to move the control to the next middleware:

const tokenExtractor = (request, response, next) => {
  // code that extracts the token

  next()
}
