const mongoose = require('mongoose');
const bcrypt = require('bcrypt'); // Use bcrypt or bcryptjs

const userSchema = new mongoose.Schema({
  username: String,
  name: String,
  passwordHash: String,
});

userSchema.pre('save', async function (next) {
  const user = this;
  if (user.isModified('passwordHash')) {
    user.passwordHash = await bcrypt.hash(user.passwordHash, 10);
  }
  next();
});

const User = mongoose.model('User', userSchema);

module.exports = User;


const express = require('express');
const app = express();
const User = require('./models/user'); // Adjust the path to your User model

app.use(express.json());

app.post('/api/users', async (req, res) => {
  try {
    const { username, name, password } = req.body;

    if (!username || !name || !password) {
      return res.status(400).json({ error: 'All fields are required.' });
    }

    const existingUser = await User.findOne({ username });

    if (existingUser) {
      return res.status(400).json({ error: 'Username is already taken.' });
    }

    const newUser = new User({
      username,
      name,
      passwordHash: password,
    });

    const savedUser = await newUser.save();

    res.status(201).json(savedUser);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// ... other routes ...

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
