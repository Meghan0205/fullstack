const mostLikes = (blogs) => {
  if (blogs.length === 0) {
    return null; // Return null if the list of blogs is empty.
  }

  const authorLikes = {};

  blogs.forEach((blog) => {
    if (authorLikes[blog.author]) {
      authorLikes[blog.author] += blog.likes;
    } else {
      authorLikes[blog.author] = blog.likes;
    }
  });

  let mostLikesAuthor = { author: null, likes: 0 };

  for (const author in authorLikes) {
    if (authorLikes[author] > mostLikesAuthor.likes) {
      mostLikesAuthor = { author, likes: authorLikes[author] };
    }
  }

  return mostLikesAuthor;
};

module.exports = {
  dummy,
  totalLikes,
  favoriteBlog,
  mostBlogs,
  mostLikes
};



describe('most likes', () => {
  test('when list has only one blog, it is the author with the most likes', () => {
    const listWithOneBlog = [
      {
        author: 'Author A',
        likes: 10
      }
    ];

    const result = listHelper.mostLikes(listWithOneBlog);
    const expected = {
      author: 'Author A',
      likes: 10
    };
    expect(result).toEqual(expected);
  });

  test('when list has multiple blogs, it returns the author with the most likes', () => {
    const listWithMultipleBlogs = [
      {
        author: 'Author A',
        likes: 20
      },
      {
        author: 'Author B',
        likes: 15
      },
      {
        author: 'Author C',
        likes: 25
      }
    ];

    const result = listHelper.mostLikes(listWithMultipleBlogs);
    const expected = {
      author: 'Author C',
      likes: 25
    };
    expect(result).toEqual(expected);
  });

  test('when list is empty, it returns null', () => {
    const emptyList = [];

    const result = listHelper.mostLikes(emptyList);
    expect(result).toBeNull();
  });

  // Add more test cases here to cover various scenarios
});
